<tokens>
<keyword> class </keyword>
<identifier> Square </identifier>
<symbol> &#10; </symbol>
<keyword> def </keyword>
<identifier> initialize </identifier>
<symbol> ( </symbol>
<identifier> Ax </identifier>
<symbol> , </symbol>
<identifier> Ay </identifier>
<symbol> , </symbol>
<identifier> Asize </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> let </keyword>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> Ax </identifier>
<symbol> &#10; </symbol>
<keyword> let </keyword>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> Ay </identifier>
<symbol> &#10; </symbol>
<keyword> let </keyword>
<symbol> @ </symbol>
<identifier> size </identifier>
<symbol> = </symbol>
<identifier> Asize </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> draw </identifier>
<symbol> &#10; </symbol>
<keyword> return </keyword>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> def </keyword>
<identifier> dispose </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> def </keyword>
<identifier> draw </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> def </keyword>
<identifier> erase </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> def </keyword>
<identifier> incSize </identifier>
<symbol> &#10; </symbol>
<keyword> if </keyword>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> erase </identifier>
<symbol> &#10; </symbol>
<keyword> let </keyword>
<symbol> @ </symbol>
<identifier> size </identifier>
<symbol> = </symbol>
<symbol> @ </symbol>
<identifier> size </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> draw </identifier>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> def </keyword>
<identifier> decSize </identifier>
<symbol> &#10; </symbol>
<keyword> if </keyword>
<symbol> @ </symbol>
<identifier> size </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> erase </identifier>
<symbol> &#10; </symbol>
<keyword> let </keyword>
<symbol> @ </symbol>
<identifier> size </identifier>
<symbol> = </symbol>
<symbol> @ </symbol>
<identifier> size </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> draw </identifier>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> def </keyword>
<identifier> moveUp </identifier>
<symbol> &#10; </symbol>
<keyword> if </keyword>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> let </keyword>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> = </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> def </keyword>
<identifier> moveCallwn </identifier>
<symbol> &#10; </symbol>
<keyword> if </keyword>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> let </keyword>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> = </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> def </keyword>
<identifier> moveLeft </identifier>
<symbol> &#10; </symbol>
<keyword> if </keyword>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> let </keyword>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> = </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> def </keyword>
<identifier> moveRight </identifier>
<symbol> &#10; </symbol>
<keyword> if </keyword>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> let </keyword>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> = </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> call </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<symbol> @ </symbol>
<identifier> y </identifier>
<symbol> ) </symbol>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> end </keyword>
<symbol> &#10; </symbol>
<keyword> end </keyword>
</tokens>